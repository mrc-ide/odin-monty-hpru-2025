---
title: "the odin-monty toolkit"
author: "Rich FitzJohn, Marc Baguelin, Ed Knock"
date: "2025-02-13"
format:
    revealjs:
        slide-number: c/t
        footer: "[the odin-monty toolkit](https://mrc-ide.github.io/odin-monty/)"
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
r_output <- function(path, highlight = NULL) {
  if (is.null(highlight)) {
    prefix <- "```r"
  } else {
    prefix <- sprintf('```{.r code-line-numbers="%s"}', highlight)
  }
  writeLines(c(prefix, readLines(path), "```"))
}
set.seed(1) # always the same
knitr::knit_hooks$set(small_margins = function(before, options, envir) {
  if (before) {
    par(mar = c(4, 4, .1, .1))
  }
})
```

# Tooling up

## odin - the beginnings

-   **odin** created to integrate ODEs (e.g. for compartmental models) in R with a domain-specific language (DSL)
-   later difference (discrete-time) equations
-   Simplifies the transition from mathematical model to efficient C++ code handled in R

## Pre-Pandemic

-   odin in use for various epidemiological and mathematical modelling tasks
-   Provided a consistent DSL to keep modelling workflow organized and less error-prone

## Pandemic collaboration

-   **mcstate** and **dust** emerged during the COVID-19 pandemic
-   Collaborative work by the UK real-time modelling & software engineers teams at Imperial College
-   Tailored to handle and fit complex state-space models at scale (e.g. Knock et al. 2021)

## Challenges addressed by dust and mcstate

-   Need for **efficient** (marginal) likelihood computation for large stochastic models
-   Exploit parallelism and particle filters
-   Built on top of odin‚Äôs approach, adding support for parameter inference and particle filtering

# Rethinking the design

## Limitations

-   Post-pandemic, recognized areas for improvement:
    -   Need to go beyond particle-filter-based samplers in particular HMC and Parallel tempering
    -   Need of better architecture for real modularity
    -   Need to improve the interface

## An ambitious vision

- Design of a new architecture, rewiring data, model and parameters
- Development of automatic differentiation algorithms
- Design of a new interface 

## Untangling the spaghetti {.smaller}

![](images/dependencies_odin_mcstate.png)

- Data can mean
    - Model parameter (e.g. age-specific vaccination schedule)
    - Observations of model (e.g. number of daily hospitalisations)
    
- To achieve modularity, need to decouple dependencies

## Introducing monty

-   **monty**: A framework to handle statistical models (defined by their domain and density)
-   Aims to offers multiple sampling solutions
-   Modular approach so that odin and monty "collaborate" but remain independent

## A new architecture

::::: columns
::: {.column width="60%"}
![](images/dependencies_odin_monty.png)
:::

::: {.column width="40%"}

- Concept of "packer"
- monty models can be built from
    - odin and data
    - custom DSL
    - by composition
- MCMC samplers work on monty models

:::
:::::

## Introducing automatic differentiation {.smaller}

::::: columns
::: {.column width="60%"}
![](images/graph_one_step.png)

:::

::: {.column width="40%"}

```{r}
#| results: "asis"
r_output("models/sir_4_AD.R")
```

:::
:::::

## Introducing automatic differentiation {.smaller}

![](images/chained_graph.png)

- odin DSL is small
- Ladder shaped computation graph
- Regular parameter inputting (red)
- Regular state outputting (green)

## Reverse automatic differentiation {.smaller}

![](images/SSM_autodiff.png)

Goal: a large class of odin models and the DSL monty models can autodifferentiate

## The odin-monty vision

-   Provide a **modern modeling ecosystem**:
    1.  Powerful DSL (odin2+monty)
    2.  Streamlined parallel simulation & filtering engine (dust2)
    3.  User-friendly statistical integration platform (monty)
-   Empower researchers to build robust models quickly, accelerating scientific insights

# Toward the future

## odin2 and dust2 (Rich)

-\> @Rich for most people odin2 and dust2 are the same than odin and dust: can you summarise how the change make the whole toolkit more efficient? the parallelisation of parameter+stochastic draw groups is one I see and better memory usage between "fixed data" and changing parameters but feel free to put what you think

## 2025 Roadmap {.smaller}

-   Some missing features from mcstate/dust1
    -   multi-stage filters
    -   restarting filters
    -   GPU-accelerated fitting
    -   SMC\^2 and IF (perhaps)
-   Some almost-ready features
    -   Parallel tempering (exploit parallelism, cope with multiple modes)
    -   Automatic differentiation to be extended to almost all odin models
    -   NUTS and HMC algorithms

## Resources

-   We will provide a demonstration
-   You can find more in [our online odin-monty book](https://mrc-ide.github.io/odin-monty/)

## Odin-Monty Workshop {.smaller}

::::: columns
::: {.column width="60%"}
üìÖ **24‚Äì25 March 2025**
üìç **White City, Imperial College London**

‚úÖ **Hybrid participation available**
‚úÖ **Travel grants available**
‚úÖ **Lightning talk slots!**

üîó **Register now [here](https://docs.google.com/forms/d/e/1FAIpQLSePERaKXjMMYK0re1mh--2nNM5PCUZaRrd-SL_zSqAYY-pk5A/viewform)!**

‚ö†Ô∏è **Deadline: 19/02 ‚Äì Don't miss out!**
:::

::: {.column width="40%"}
```{r, echo=FALSE}
#| fig-width: 8
code <- qrcode::qr_code("https://docs.google.com/forms/d/e/1FAIpQLSePERaKXjMMYK0re1mh--2nNM5PCUZaRrd-SL_zSqAYY-pk5A/viewform")
plot(code)
```
:::
:::::
